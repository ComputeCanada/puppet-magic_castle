#!/bin/bash

# mkproject.sh watches 389-ds access log for operations related to group
# matching a regex ($PROJECT_REGEX) with the intent of automatically
# manipulating Slurm accounts and folders under /project associated with these
# groups.

# Three operations are currently supported: ADD, MOD and DEL.
# - ADD triggers a creation of Slurm account and directory under /project
# - MOD triggers either the additions of users to the associated Slurm
#   accounts and their folder under /project/GID/`username`
#   or it triggers the removals of the users from the associated Slurm account
#   and the removal of the symlink from the users home to the project folder.
# - DEL trigger the removal of all users from the associated Slurm account
#   and the removal of the symlink to the project from all previous member
#   home folders.


PROJECT_REGEX="<%= $project_regex %>"
BASEDN=$(grep -o -P "basedn = \K(.*)" /etc/ipa/default.conf)
WITH_FOLDER="<%= $manage_folder %>"
PREV_CONN=""

source /sbin/account_functions.sh

MKHOME_PROJECT_DIR="/var/lib/mkhome_project/"
mkdir -p ${MKHOME_PROJECT_DIR}

MODPROJECT_CACHE=${MKHOME_PROJECT_DIR}/modproject.cache
MODPROJECT_CACHE_SIZE=1000

MKPROJECT_CACHE=${MKHOME_PROJECT_DIR}/mkproject.cache
MKPROJECT_CACHE_SIZE=1000

LAST_TIMESTAMP_FILE=${MKHOME_PROJECT_DIR}/mkproject.last_timestamp

# FIFO pipes could eventually be replaced by sockets
# to allow input from other instances, like login nodes
# and avoid background echo processes. A FIFO pipe can
# be replaced by a UNIX socket with netcat and this command:
#   nc -lkU /var/tmp/dsocket
# To write data to the UNIX socket:
#   echo $((NRETRY+1)) "${GROUP}" "${WITH_FOLDER}" "${USERNAMES}" | nc -N -U /var/tmp/dsocket
MODPROJECT_PIPE=${MKHOME_PROJECT_DIR}/modproject.pipe
MODPROJECT_RETRY_PIPE=${MKHOME_PROJECT_DIR}/modproject_retry.pipe
MKHOME_MODPROJECT_PIPE=${MKHOME_PROJECT_DIR}/mkhome_modproject.pipe

trap "rm -f ${MODPROJECT_PIPE} ${MODPROJECT_RETRY_PIPE} ${MODPROJECT_CACHE} ${MKPROJECT_CACHE}" EXIT

if [[ ! -p ${MODPROJECT_PIPE} ]]; then
    mkfifo -m=600 ${MODPROJECT_PIPE}
fi

if [[ ! -p ${MODPROJECT_RETRY_PIPE} ]]; then
    mkfifo -m=600 ${MODPROJECT_RETRY_PIPE}
fi

# Create two empty cache files that are only r+w by root
install -m 600 /dev/null ${MKPROJECT_CACHE}
install -m 600 /dev/null ${MODPROJECT_CACHE}

wait_for_slurm

CONSECUTIVE_FAILURES=0
# Loop over three sources of project modification
# 1. Modification coming from SLAPD log
# 2. Modification coming from mkhome daemon
# 3. Modification coming from the loop that have errored on a previous try.
(
    tail -n+1 -F ${MODPROJECT_PIPE} &
    tail -n+1 -F ${MODPROJECT_RETRY_PIPE} &
    tail -n+1 -F ${MKHOME_MODPROJECT_PIPE}
) |
while read NRETRY GROUP WITH_FOLDER USERNAMES; do
    if [[ ! -z "${USERNAMES}" ]]; then
        # Filter group+usernames that have been successfully modified
        # and that are still in cache.
        USERNAMES=$(
            for USERNAME in ${USERNAMES}; do
                if ! grep -q "${GROUP} ${WITH_FOLDER} ${USERNAME}" ${MODPROJECT_CACHE}; then
                    echo ${USERNAME}
                fi
            done
        )
        if [[ -z "${USERNAMES}" ]]; then
            continue
        fi
    fi
    if [[ ${CONSECUTIVE_FAILURES} -gt 0 ]] && [[ ${NRETRY} -gt 0 ]]; then
        # NRETRY corresponds to the number of times that modproject has been called
        # with these arguments without success. If it is greater than 0, the script
        # sleeps to give time to the system internal to adjust before retrying.
        sleep ${CONSECUTIVE_FAILURES}
    fi
    if [ -e "${MKHOME_PROJECT_DIR}/${GROUP}.slurm.failed" ]; then
        if mkproject ${GROUP} ${WITH_FOLDER}; then
            rm "${MKHOME_PROJECT_DIR}/${GROUP}.slurm.failed"
            echo "${GROUP}" >> ${MKPROJECT_CACHE}
            if [[ $(wc -l < ${MKPROJECT_CACHE}) -gt ${MKPROJECT_CACHE_SIZE} ]]; then
                sed -i '1d' ${MKPROJECT_CACHE}
            fi
            # Identify usernames that are already member of the group - most likely through automembership
            USERNAMES=$(kexec ipa group-show ${GROUP} --raw |  grep -o -P "uid=\K(.*)(?=,cn=users)")
            if [[ ! -z ${USERNAMES} ]]; then
                echo 0 ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_PIPE} &
            fi
        else
            CONSECUTIVE_FAILURES=$(($CONSECUTIVE_FAILURES+1))
            echo $((NRETRY+1)) ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_RETRY_PIPE} &
            continue
        fi
    fi
    modproject ${GROUP} ${WITH_FOLDER} ${USERNAMES}
    case $? in
        0)
            # modproject has been successful, so we wad all usernames individually to
            # the cache, then we restrict the size of the cache to its maximum value
            # by keeping the N most recent element added.
            for USERNAME in ${USERNAMES}; do
                echo "${GROUP}" "${WITH_FOLDER}" "${USERNAME}" >> ${MODPROJECT_CACHE}
            done
            echo "$(tail -n ${MODPROJECT_CACHE_SIZE} ${MODPROJECT_CACHE})" > ${MODPROJECT_CACHE}
            CONSECUTIVE_FAILURES=0
            ;;
        1)
            # modproject was not successul, but the arguments are valid, so we should try again
            # later. We increment the number of retry and add the arguments the retry pipeline.
            CONSECUTIVE_FAILURES=$(($CONSECUTIVE_FAILURES+1))
            if [[ ${NRETRY} -lt 10 ]]; then
                echo $((NRETRY+1)) ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_RETRY_PIPE} &
            else
                echo "ERROR::modproject ${GROUP} ${WITH_FOLDER} ${USERNAMES}: giving up after 10 attempts."
            fi
            ;;
        *)
            # modproject was not successful and the return code indicates the function should not be
            # called again with these arguments (invalid arguments, do not retry).
            CONSECUTIVE_FAILURES=$(($CONSECUTIVE_FAILURES+1))
            ;;
    esac
done &

# Do not reprocess previous entries if we remember the last timestamp treated
if [ -e $LAST_TIMESTAMP_FILE ]; then
    LAST_TIMESTAMP=$(cat $LAST_TIMESTAMP_FILE)
    start_index=$(sed -n "/${LAST_TIMESTAMP//\//\\\/}/=" /var/log/dirsrv/slapd-*/access)
    start_index=$(($start_index+1))
else
    start_index=1
fi

tail -n +${start_index} -F /var/log/dirsrv/slapd-*/access |
grep --line-buffered -P "dn=\"cn=${PROJECT_REGEX},cn=groups" |
sed -u -r 's/^\[(.*) \+[0-9]{4}\] conn=([0-9]*) op=[0-9]* (\w+) dn="cn=(.*),cn=groups.*$/\1 \2 \3 \4/' |
while read TIMESTAMP CONN OP GROUP; do
    # An operation has been done on a group in LDAP
    # We have already completed this request
    if [[ "${PREV_CONN}" == "${CONN}" ]]; then
        echo "${TIMESTAMP}" > ${LAST_TIMESTAMP_FILE}
        continue
    fi

    # We wait for the operation $CONN to be completed.
    # Taken from StackExchange:
    # https://unix.stackexchange.com/questions/416150/make-tail-f-exit-on-a-broken-pipe
    {
        grep --line-buffered -q -m 1 "conn=${CONN} op=[0-9]* UNBIND";
        kill -s PIPE "$!";
    } < <(tail -n +0 -F /var/log/dirsrv/slapd-*/access 2> /dev/null)

    # We support three operations : ADD, MOD or DEL
    case ${OP} in
        ADD)
            if grep -q "${GROUP}" ${MKPROJECT_CACHE}; then
                echo "${TIMESTAMP}" > ${LAST_TIMESTAMP_FILE}
                PREV_CONN="${CONN}"
                continue
            fi

            if mkproject ${GROUP} ${WITH_FOLDER}; then
                echo "${GROUP}" >> ${MKPROJECT_CACHE}
                if [[ $(wc -l < ${MKPROJECT_CACHE}) -gt ${MKPROJECT_CACHE_SIZE} ]]; then
                    sed -i '1d' ${MKPROJECT_CACHE}
                fi
                # Identify usernames that are already member of the group - most likely through automembership
                USERNAMES=$(kexec ipa group-show ${GROUP} --raw |  grep -o -P "uid=\K(.*)(?=,cn=users)")
                if [[ ! -z ${USERNAMES} ]]; then
                    echo 0 ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_PIPE} &
                fi
            else
                touch "${MKHOME_PROJECT_DIR}/${GROUP}.slurm.failed"
            fi
            ;;
        MOD)
            # One or more groups have been modified
            # We grep the log for all operations related to request $CONN that contain a uid
            USERNAMES=$(grep -oP "conn=${CONN} op=[0-9]* SRCH base=\"uid=\K(.*)(?=,cn=users)" /var/log/dirsrv/slapd-*/access | sort | uniq)
            # We grep all unique groups that have been modified
            MOD_GROUPS=$(grep -oP "conn=${CONN} op=[0-9]* MOD dn=\"cn=\K${PROJECT_REGEX}" /var/log/dirsrv/slapd-*/access | uniq)
            for GROUP in ${MOD_GROUPS}; do
                echo 0 ${GROUP} ${WITH_FOLDER} ${USERNAMES} > ${MODPROJECT_PIPE} &
            done
            ;;
        DEL)
            delproject ${GROUP} ${WITH_FOLDER}
            ;;
        *)
            echo "Unknown operation ${OP}"
            ;;
    esac
    PREV_CONN="${CONN}"
    echo "${TIMESTAMP}" > ${LAST_TIMESTAMP_FILE}
done
